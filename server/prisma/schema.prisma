// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id                Int                @id @default(autoincrement())
  username          String             @unique @db.VarChar(100)
  password          String             @db.VarChar(255)
  hasOnboarded      Boolean            @default(false) @map("has_onboarded")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @default(now()) @updatedAt @map("updated_at")
  workExperiences   WorkExperience[]
  otherExperiences  OtherExperience[]
  coverLetters      CoverLetter[]
  experienceDetails ExperienceDetail[]

  @@map("users")
}

model WorkExperience {
  id                Int                @id @default(autoincrement())
  jobTitle          String             @map("job_title") @db.VarChar(50)
  company           String             @db.VarChar(50)
  years             Int
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @default(now()) @updatedAt @map("updated_at")
  user              User               @relation(fields: [userId], references: [id])
  userId            Int
  experienceDetails ExperienceDetail[]

  @@unique([userId, jobTitle, company])
  @@index([userId])
  @@map("work_experiences")
}

model OtherExperience {
  id                Int                @id @default(autoincrement())
  title             String             @db.VarChar(50)
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @default(now()) @updatedAt @map("updated_at")
  user              User               @relation(fields: [userId], references: [id])
  userId            Int
  experienceDetails ExperienceDetail[]

  @@unique([userId, title])
  @@index([userId])
  @@map("other_experiences")
}

model CoverLetter {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(50)
  text      String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  @@unique([userId, title])
  @@index([userId])
  @@map("cover_letters")
}

model ExperienceDetail {
  id                Int                        @id @default(autoincrement())
  text              String                     @db.Text
  embedding         Unsupported("vector(384)")
  createdAt         DateTime                   @default(now()) @map("created_at")
  updatedAt         DateTime                   @default(now()) @updatedAt @map("updated_at")
  workExperience    WorkExperience?            @relation(fields: [workExperienceId], references: [id])
  workExperienceId  Int?
  otherExperience   OtherExperience?           @relation(fields: [otherExperienceId], references: [id])
  otherExperienceId Int?
  user              User                       @relation(fields: [userId], references: [id])
  userId            Int

  @@index([userId])
  @@index([workExperienceId])
  @@index([otherExperienceId])
  @@map("experience_details")
}
